tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
tab <- as.data.frame(tab)
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
var.mat <- var(adj.rtns[, 1:n])
rf <- 0.0027/365
# create portfolio weights (omegas)
x_weights <- seq(from = 0, to = 1, length.out = 1000)
# create a data.table that contains the weights for the three assets
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
View(three_assets)
View(var.mat)
View(var.mat)
# calculate the expected returns and standard deviations for the 1000 possible portfolios
three_assets[, ':=' (er.p = wx * exp.rtn[1] + wy * exp.rtn[2] + wz * exp.rtn[3],
sd.p = sqrt(wx^2 * var.mat[1, 1] +
wy^2 * var.mat[2, 2] +
wz^2 * var.mat[3, 3] +
2 * wx * wy * var.mat[2, 1] +
2 * wx * wz * var.mat[3, 1] +
2 * wy * wz * var.mat[2, 3]))]
# take out cases where we have negative weights (shortselling)
three_assets <- three_assets[wx >= 0 & wy >= 0 & wz >= 0]
three_assets
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]), mean = c(exp.rtn[1], exp.rtn[1], exp.rtn[1])),
aes(x = sd, y = mean), color = "red", size = 3, shape = 18) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]), mean = c(exp.rtn[1], exp.rtn[2], exp.rtn[3])),
aes(x = sd, y = mean), color = "red", size = 3, shape = 18) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sqrt(var.mat[1, 1]), sqrt(var.mat[2, 2]), sqrt(var.mat[3, 3])), mean = c(exp.rtn[1], exp.rtn[2], exp.rtn[3])),
aes(x = sd, y = mean), color = "orange", size = 3, shape = 18) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sd.vec[1], sd.vec[2], sd.vec[3]), mean = c(exp.rtn[1], exp.rtn[2], exp.rtn[3])),
aes(x = sd, y = mean), color = "orange", size = 3, shape = 18) +
# Miscellaneous Formatting
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, data.table, dplyr, ggplot2, quantmod, scales, tseries)
link <- "https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/mult_assets.csv"
df <- data.table(read.csv(link))
View(df)
?melt
df_table <- melt(df)[, .(er = mean(value),
sd = sd(value)), by = variable]
View(df_table)
er_vals <- seq(from = min(tab$er), to = max(tab$er), length.out = 1000)
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# File:    Portfolio Theory
# Author:  David Harris
# Date:    29-May-2020
# INSTALL AND LOAD PACKAGES ################################
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, data.table, dplyr, ggplot2, quantmod, scales, tseries)
# SET WORKING DIRECTORY ####################################
getwd()
setwd("C:/Users/dtunks/OneDrive - KPMG/Desktop/PD & Personal/R data analysis/CAPM") #*remember to change \ to /
# LOAD DATA ################################################
s.date <- Sys.Date()-(365*5+1)
Ticks <- c("VAS.AX", "VAF.AX", "NDQ.AX", "VGAD.AX")
returns <- Ticks %>% lapply(function(x) getSymbols(x, from=s.date, auto.assign = F)) %>%
lapply(function(x) na.omit(weeklyReturn(Ad(x))))
adj.rtns <- do.call(merge, returns)
colnames(adj.rtns) <- Ticks
# WORK WITH DATA ###########################################
n <- ncol(adj.rtns)
exp.rtn <- as.vector(c(rep(NA, n)))
for(i in 1:n){
exp.rtn[i] <- round(mean(adj.rtns[, i]), 4)
}
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
tab <- as.data.frame(tab)
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
ggplot(tab, aes(x = sd, y = er, color = Ticks)) +
geom_point(size = 5) +
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.005)) +
scale_x_continuous(label = percent, limits = c(0, 0.03))
var.mat <- var(adj.rtns[, 1:n])
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
rf <- 0.0027/365
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, data.table, dplyr, ggplot2, quantmod, scales, tseries)
# LOAD DATA ################################################
s.date <- Sys.Date()-(365*5+1)
Ticks <- c("VAS.AX", "VAF.AX", "NDQ.AX", "VGAD.AX")
returns <- Ticks %>% lapply(function(x) getSymbols(x, from=s.date, auto.assign = F)) %>%
lapply(function(x) na.omit(weeklyReturn(Ad(x))))
adj.rtns <- do.call(merge, returns)
colnames(adj.rtns) <- Ticks
# WORK WITH DATA ###########################################
n <- ncol(adj.rtns)
exp.rtn <- as.vector(c(rep(NA, n)))
for(i in 1:n){
exp.rtn[i] <- round(mean(adj.rtns[, i]), 4)
}
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
var.mat <- var(adj.rtns[, 1:n])
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
tab <- as.data.frame(tab)
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
ggplot(tab, aes(x = sd, y = er, color = Ticks)) +
geom_point(size = 5) +
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.005)) +
scale_x_continuous(label = percent, limits = c(0, 0.03))
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
rf <- 0.0027/365
er_vals <- seq(from = min(tab$er), to = max(tab$er), length.out = 1000)
er_vals
sd_vals <- sapply(er_vals, function(er) {
op <- portfolio.optim(as.matrix(df), er)
return(op$ps)
})
sd_vals <- sapply(er_vals, function(er) {
op <- portfolio.optim(as.matrix(adj.rtns), er)
return(op$ps)
})
sd_vals <- sapply(er_vals, function(er) {
op <- portfolio.optim(as.matrix(adj.rtns), er)
return(op$ps)
})
?portfolio.optim
op <- portfolio.optim(adj.rtns, er)
sd_vals <- sapply(er_vals, function(er) {
op <- portfolio.optim(adj.rtns, er)
return(op$ps)
})
op <- portfolio.optim(adj.rtns, rf = rf)
View(op)
op[["pw"]]
View(adj.rtns)
link <- "https://raw.githubusercontent.com/DavZim/Efficient_Frontier/master/data/mult_assets.csv"
df <- data.table(read.csv(link))
df_table <- melt(df)[, .(er = mean(value),
sd = sd(value)), by = variable]
er_vals <- seq(from = min(df_table$er), to = max(df_table$er), length.out = 1000)
# find an optimal portfolio for each possible possible expected return
# (note that the values are explicitly set between the minimum and maximum of the expected returns per asset)
sd_vals <- sapply(er_vals, function(er) {
op <- portfolio.optim(as.matrix(df), er)
return(op$ps)
})
plot_dt <- data.table(sd = sd_vals, er = er_vals)
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# File:    Portfolio Theory
# Author:  David Harris
# Date:    29-May-2020
# INSTALL AND LOAD PACKAGES ################################
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, data.table, dplyr, ggplot2, quantmod, scales, tseries)
# SET WORKING DIRECTORY ####################################
getwd()
setwd("C:/Users/dtunks/OneDrive - KPMG/Desktop/PD & Personal/R data analysis/CAPM") #*remember to change \ to /
# LOAD DATA ################################################
s.date <- Sys.Date()-(365*5+1)
Ticks <- c("VAS.AX", "VAF.AX", "NDQ.AX", "VGAD.AX")
returns <- Ticks %>% lapply(function(x) getSymbols(x, from=s.date, auto.assign = F)) %>%
lapply(function(x) na.omit(weeklyReturn(Ad(x))))
adj.rtns <- do.call(merge, returns)
colnames(adj.rtns) <- Ticks
# WORK WITH DATA ###########################################
n <- ncol(adj.rtns)
exp.rtn <- as.vector(c(rep(NA, n)))
for(i in 1:n){
exp.rtn[i] <- round(mean(adj.rtns[, i]), 4)
}
var.mat <- var(adj.rtns[, 1:n])
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
tab <- as.data.frame(tab)
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
ggplot(tab, aes(x = sd, y = er, color = Ticks)) +
geom_point(size = 5) +
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.005)) +
scale_x_continuous(label = percent, limits = c(0, 0.03))
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
rf <- 0.0027/365
op <- portfolio.optim(adj.rtns, rf = rf)
# Plotting Three Asset Efficient Frontier
x_weights <- seq(from = 0, to = 1, length.out = 1000)
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
View(var.mat)
# Plotting Three Asset Efficient Frontier
x_weights <- seq(from = 0, to = 1, length.out = 1000)
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
three_assets[, ':=' (er.p = wx * exp.rtn[2] + wy * exp.rtn[3] + wz * exp.rtn[4],
sd.p = sqrt(wx^2 * var.mat[2, 2] +
wy^2 * var.mat[3, 3] +
wz^2 * var.mat[4, 4] +
2 * wx * wy * var.mat[3, 2] +
2 * wx * wz * var.mat[4, 2] +
2 * wy * wz * var.mat[3, 4]))]
# take out cases where we have negative weights (shortselling)
three_assets <- three_assets[wx >= 0 & wy >= 0 & wz >= 0]
three_assets
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sd.vec[2], sd.vec[3], sd.vec[4]), mean = c(exp.rtn[2], exp.rtn[3], exp.rtn[4])),
aes(x = sd, y = mean), color = "green", size = 3, shape = 18) +
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
# Plotting Three Asset Efficient Frontier
x_weights <- seq(from = 0, to = 1, length.out = 1000)
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
three_assets[, ':=' (er.p = wx * exp.rtn[1] + wy * exp.rtn[2] + wz * exp.rtn[3],
sd.p = sqrt(wx^2 * var.mat[1, 1] +
wy^2 * var.mat[2, 2] +
wz^2 * var.mat[3, 3] +
2 * wx * wy * var.mat[2, 1] +
2 * wx * wz * var.mat[3, 1] +
2 * wy * wz * var.mat[2, 3]))]
# take out cases where we have negative weights (shortselling)
three_assets <- three_assets[wx >= 0 & wy >= 0 & wz >= 0]
three_assets
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sd.vec[1], sd.vec[2], sd.vec[3]), mean = c(exp.rtn[1], exp.rtn[2], exp.rtn[3])),
aes(x = sd, y = mean), color = "green", size = 3, shape = 18) +
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# Author:  David Harris, davidht296@gmail.com
# Date:    2020/03/25
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# Clear environment
rm(list = ls())
# CLEAN UP #################################################
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()
# Clear console
cat("\014")  # ctrl+L
# File:    Portfolio Theory
# Author:  David Harris
# Date:    29-May-2020
# INSTALL AND LOAD PACKAGES ################################
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, data.table, dplyr, ggplot2, quantmod, scales, tseries)
# SET WORKING DIRECTORY ####################################
getwd()
setwd("C:/Users/dtunks/OneDrive - KPMG/Desktop/PD & Personal/R data analysis/CAPM") #*remember to change \ to /
# LOAD DATA ################################################
s.date <- Sys.Date()-(365*5+1)
Ticks <- c("VAS.AX", "VAF.AX", "NDQ.AX", "VGAD.AX")
returns <- Ticks %>% lapply(function(x) getSymbols(x, from=s.date, auto.assign = F)) %>%
lapply(function(x) na.omit(weeklyReturn(Ad(x))))
adj.rtns <- do.call(merge, returns)
colnames(adj.rtns) <- Ticks
# WORK WITH DATA ###########################################
n <- ncol(adj.rtns)
exp.rtn <- as.vector(c(rep(NA, n)))
for(i in 1:n){
exp.rtn[i] <- round(mean(adj.rtns[, i]), 4)
}
var.mat <- var(adj.rtns[, 1:n])
tab <- matrix(rep(NA, n*3), nrow = n, ncol = 3)
for(i in 1:n){
tab[i, 1] <- exp.rtn[i]
tab[i, 2] <- sqrt(var.mat[i, i])
tab[i, 3] <- tab[i, 1]/tab[i, 2]
}
tab <- as.data.frame(tab)
row.names(tab) <- Ticks
names(tab) <- c("er", "sd", "Sharpe")
ggplot(tab, aes(x = sd, y = er, color = Ticks)) +
geom_point(size = 5) +
theme_bw() + ggtitle("Risk-Return Tradeoff") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, 0.005)) +
scale_x_continuous(label = percent, limits = c(0, 0.03))
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
rf <- 0.0027/365
op <- portfolio.optim(adj.rtns, rf = rf)
View(op)
op[["px"]]
op[["pm"]]
op[["ps"]]
opm <- op$pw[2]*tab$er[2]+op$pw[3]*tab$er[3]
# Plotting Three Asset Efficient Frontier
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3]))
x_weights <- seq(from = 0, to = 1, length.out = 1000)
three_assets <- data.table(wx = rep(x_weights, each = length(x_weights)),
wy = rep(x_weights, length(x_weights)))
three_assets[, wz := 1 - wx - wy]
three_assets[, ':=' (er.p = wx * exp.rtn[1] + wy * exp.rtn[2] + wz * exp.rtn[3],
sd.p = sqrt(wx^2 * var.mat[1, 1] +
wy^2 * var.mat[2, 2] +
wz^2 * var.mat[3, 3] +
2 * wx * wy * var.mat[2, 1] +
2 * wx * wz * var.mat[3, 1] +
2 * wy * wz * var.mat[2, 3]))]
# take out cases where we have negative weights (shortselling)
three_assets <- three_assets[wx >= 0 & wy >= 0 & wz >= 0]
three_assets
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sd.vec[1], sd.vec[2], sd.vec[3]), mean = c(exp.rtn[1], exp.rtn[2], exp.rtn[3])),
aes(x = sd, y = mean), color = "green", size = 3, shape = 18) +
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
# Plotting Three Asset Efficient Frontier
sd.vec <- sqrt(c(var.mat[1, 1], var.mat[2, 2], var.mat[3, 3], var.mat[4, 4]))
three_assets[, ':=' (er.p = wx * exp.rtn[2] + wy * exp.rtn[3] + wz * exp.rtn[4],
sd.p = sqrt(wx^2 * var.mat[2, 2] +
wy^2 * var.mat[3, 3] +
wz^2 * var.mat[4, 4] +
2 * wx * wy * var.mat[3, 2] +
2 * wx * wz * var.mat[4, 2] +
2 * wy * wz * var.mat[3, 4]))]
# take out cases where we have negative weights (shortselling)
three_assets <- three_assets[wx >= 0 & wy >= 0 & wz >= 0]
three_assets
ggplot() +
geom_point(data = three_assets, aes(x = sd.p, y = er.p, color = wx - wz)) +
geom_point(data = data.table(sd = c(sd.vec[2], sd.vec[3], sd.vec[4]), mean = c(exp.rtn[2], exp.rtn[3], exp.rtn[4])),
aes(x = sd, y = mean), color = "green", size = 3, shape = 18) +
theme_bw() + ggtitle("Efficient Frontier with Three Risky Assets") +
xlab("Volatility") + ylab("Expected Returns") +
scale_y_continuous(label = percent, limits = c(0, max(three_assets$er.p) * 1.2)) +
scale_x_continuous(label = percent, limits = c(0, max(three_assets$sd.p) * 1.2)) +
scale_color_gradientn(colors = c("red", "blue", "yellow"),
name = expression(omega[x] - omega[z]), labels = percent)
?portfolio.optim()
# package descriptions and help
p_help("tseries", web = F)
rf <- 0.0027/52
365
rf <- 0.0027/365
rf <- 0.0027/52
